=for html <a href="https://travis-ci.org/jddurand/c-marpaWrapper"><img src="https://travis-ci.org/jddurand/c-marpaWrapper.svg?branch=master" alt="Travis CI build status" height="18"></a> <a href="https://badge.fury.io/gh/jddurand%2Fc-marpaWrapper"><img src="https://badge.fury.io/gh/jddurand%2Fc-marpaWrapper.svg" alt="GitHub version" height="18"></a> <a href="http://opensource.org/licenses/MIT" rel="nofollow noreferrer"><img src="https://img.shields.io/badge/license-MIT-blue.svg" alt="License MIT" height="18"></a>

=head1 NAME

marpaWrapper - alternate interface to libmarpa

=head1 DESCRIPTION

marpaWrapper is a thin interface on top of L<libmarpa|https://jeffreykegler.github.io/Marpa-web-site/libmarpa.html>. Alike the original, there are three explicit namespaces: the grammar, the recognizer and the value.

=head1 SYNOPSIS

  #include <marpaWrapper.h>

=head1 GRAMMAR METHODS

=head2 marpaWrapperGrammar_newp

  typedef struct marpaWrapperGrammarOption {
    genericLogger_t *genericLoggerp;             /* Default: NULL.                                      */
    short            warningIsErrorb;            /* Default: 0. Have precedence over warningIsIgnoredb  */
    short            warningIsIgnoredb;          /* Default: 0.                                         */
  } marpaWrapperGrammarOption_t;

  marpaWrapperGrammar_t *marpaWrapperGrammar_newp(marpaWrapperGrammarOption_t *marpaWrapperGrammarOptionp)

Instanciate a grammar wrapper, and takes an eventual pointer to a C<marpaWrapperGrammarOption_t> structure describing grammar options. This structure contains the following members:

=over

=item genericLoggerp

An eventual generic logger. If NULL, the grammar will never log.

=item warningIsErrorb

A flag saying that any grammar warning should be treated as an error. Any true value enable this flag. Only 0 can disable it. It has precedence over the next member:

=item warningIsIgnoredb

A flag saying that any grammar warning should be ignored. Any true value enable this flag. Only 0 can disable it.

=back

C<NULL> is returned in case of failure.

=head2 marpaWrapperGrammar_newSymboli

  typedef enum marpaWrapperGrammarEventType {
    MARPAWRAPPERGRAMMAR_EVENTTYPE_NONE       = 0x00,
    MARPAWRAPPERGRAMMAR_EVENTTYPE_COMPLETION = 0x01,
    MARPAWRAPPERGRAMMAR_EVENTTYPE_NULLED     = 0x02,
    MARPAWRAPPERGRAMMAR_EVENTTYPE_PREDICTION = 0x04,
  } marpaWrapperGrammarEventType_t;

  typedef struct marpaWrapperGrammarSymbolOption {
    short  terminalb;             /* Default: 0. Eventually force symbol to be terminal         */
    short  startb;                /* Default: 0. Eventually force symbol to be the start symbol */
    int    eventSeti;             /* Default: MARPAWRAPPERGRAMMAR_EVENTTYPE_NONE.               */
  } marpaWrapperGrammarSymbolOption_t;

  marpaWrapperGrammar_newSymboli(marpaWrapperGrammar_t *marpaWrapperGrammarp,
                                 marpaWrapperGrammarSymbolOption_t *marpaWrapperGrammarSymbolOptionp)

Creates a new symbol. Takes an eventual pointer to a C<marpaWrapperGrammarSymbolOption_t> structure describing symbol options. Such structure contain:

=over

=item terminalb

If this is a true value, it forces the grammar to treat this symbol as a terminal.

=item startb

If this is a true value, it forces the grammar to treat this symbol as the start symbol. Default is to take the very first symbol created as the starting point.

=item eventSeti

A bitwise mask of the following constant values:

=over

=item MARPAWRAPPERGRAMMAR_EVENTTYPE_COMPLETION

This symbol can generate a completed event.

=item MARPAWRAPPERGRAMMAR_EVENTTYPE_NULLED

This symbol can generate a nulling event.

=item MARPAWRAPPERGRAMMAR_EVENTTYPE_PREDICTION

This symbol can generate a predicted event.

=back

A false value is equivalent to MARPAWRAPPERGRAMMAR_EVENTTYPE_NONE, i.e. no event set on this symbol at creation time.

A positive integer is returned on success, -1 on failure. End-user can profit from the fact that the returned number always start at 0 for the very first symbol, and increases by one at every new symbol.

The macro C<MARPAWRAPPERGRAMMAR_NEWSYMBOL(marpaWrapperGrammarp)> exist for convenience, and is stricly equivalent to the call C<marpaWrapperGrammar_newSymboli((marpaWrapperGrammarp), NULL)>.

=back

=head2 marpaWrapperGrammar_newSymbolExti

  int marpaWrapperGrammar_newSymbolExti(marpaWrapperGrammar_t *marpaWrapperGrammarp,
                                        short terminalb,
                                        short startb,
                                        int eventSeti)

Alternate way to create a symbol, where all the options are explicitely given as parameters. C<terminalb>, C<startb> and C<eventSeti> have the same meaning as in the C<marpaWrapperGrammarSymbolOption_t> structure.

=head2 marpaWrapperGrammar_newRulei

  typedef struct marpaWrapperGrammarRuleOption {
    int    ranki;          /* Default: 0. Rank                                        */
    short  nullRanksHighb; /* Default: 0. Null variant pattern                        */
    short  sequenceb;      /* Default: 0. Sequence ?                                  */
    int    separatorSymboli; /* Default: -1. Eventual separator symbol                */
    short  properb;        /* Default: 0. Proper flag                                 */
    int    minimumi;       /* Default: 0. Mininimum - must be 0 or 1                  */
  } marpaWrapperGrammarRuleOption_t;

  int marpaWrapperGrammar_newRulei(marpaWrapperGrammar_t *marpaWrapperGrammarp,
                                   marpaWrapperGrammarRuleOption_t *marpaWrapperGrammarRuleOptionp,
                                   int lhsSymboli,
                                   size_t rhsSymboll, int *rhsSymbolip)

Creates a new rule, with LHS symbol C<lhsSymboli>, and C<rhsSymboll> symbols, stored in the array C<rhsSymbolip>. The pointer to an eventual C<marpaWrapperGrammarRuleOption_t> structure give the following options:

=over

=item ranki

Rule priority.

=item nullRanksHighb

Null variants pattern. If 0, nulled symbols rank low, else nulled symbols rank high.

=item sequenceb

If a true value, identifies this rule as being a sequence. Then there must be one RHS symbol, and the following next members take effect:

=item separatorSymboli

If positive or zero, this is the symbol Id of a separator.

=item properb

When it is a true value, says that the separation is proper, i.e. trailing separator is not allowed.

=item minimumi

When it is 0 or '*', says the sequence repeats at least zero time. If 1 or '+', says it repeat at least one time.

=back

A positive integer is returned on success, -1 on failure. End-user can profit from the fact that the returned number always start at 0 for the very first rule, and increases by one at every new symbol.

=head2 marpaWrapperGrammar_newRuleExti

  int marpaWrapperGrammar_newRuleExti(marpaWrapperGrammar_t *marpaWrapperGrammarp,
                                      int ranki,
                                      short nullRanksHighb,
                                      int lhsSymboli, ...)

Alternate way to create a rule that is not sequence. The variadic parameter C<...> must end with -1 to identify the end of the RHS list.

The macro C<MARPAWRAPPERGRAMMAR_NEWRULE(marpaWrapperGrammarp, lhsSymboli, ...)>, doing exactly this call, exist for convenience.

=head2 marpaWrapperGrammar_newSequenceExti

  int marpaWrapperGrammar_newSequenceExti(marpaWrapperGrammar_t *marpaWrapperGrammarp,
                                          int ranki,
                                          short nullRanksHighb,
                                          int lhsSymboli,
                                          int rhsSymboli,
                                          int minimumi,
                                          int separatorSymboli,
                                          short properb)

Alternate way to create a sequence.

The macro C<MARPAWRAPPERGRAMMAR_NEWSEQUENCE(marpaWrapperGrammarp, lhsSymboli, rhsSymboli, minimumi)>, exist for convenience, and is equivalent to calling C<marpaWrapperGrammar_newSequenceExti((marpaWrapperGrammarp), 0, 0, (lhsSymboli), (rhsSymboli), (minimumi), -1, 0)>.

=head2 marpaWrapperGrammar_eventb

  typedef struct marpaWrapperGrammarEvent {
    enum {
      MARPAWRAPPERGRAMMAR_EVENT_COMPLETED,
      MARPAWRAPPERGRAMMAR_EVENT_NULLED,
      MARPAWRAPPERGRAMMAR_EVENT_EXPECTED
    } eventType;
    int symboli;
  } marpaWrapperGrammarEvent_t;

  short marpaWrapperGrammar_eventb(marpaWrapperGrammar_t *marpaWrapperGrammarp, size_t *eventlp, marpaWrapperGrammarEvent_t **eventpp, short forceReloadb)

Return the list of events. NUmber of events is stored in C<eventlp>, and C<eventpp> is the list itself. This list of owned by the grammar and must B<not> be freed by the caller. Events are alwasy pre-fetched whenever necessary, that is the C<forceReloadb> parameter should be 0 in all situations. Nevertheless, a true value for C<forceReloadb> is allowed.

Returns 0 on failure, 1 on success.

=head2 marpaWrapperGrammar_precomputeb

  short marpaWrapperGrammar_precomputeb(marpaWrapperGrammar_t *marpaWrapperGrammarp)

Compute the grammar. Return 0 on failure, 1 on success. Eventual events are automatically fetched.

=head1 RECOGNIZER METHODS

=head1 VALUES METHODS

=head2 SEE ALSO

L<libmarpa|https://jeffreykegler.github.io/Marpa-web-site/libmarpa.html>, L<genericLogger|https://github.com/jddurand/c-genericLogger>, L<genericStack|https://github.com/jddurand/c-genericStack>
